@inject PlayerService PlayerService
@implements IDisposable

<div class="col-12 col-md-6">
    <div class="card bg-secondary bg-opacity-10 border-0">
        <div class="card-body p-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title text-light mb-0">
                    <i class="fas fa-tower-observation text-info me-2"></i> Tower Progress
                </h5>
            </div>
            <div class="progress mt-3" style="height: 25px">
                <div class="progress-bar bg-info progress-bar-striped progress-bar-animated"
                     role="progressbar"
                     style="width: @PlayerService.CurrentFloor%">
                    <span class="progress-text">Floor @PlayerService.CurrentFloor / 100</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .progress {
        background-color: rgba(0, 0, 0, 0.2);
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .progress-text {
        color: white;
        font-weight: bold;
        font-size: 1rem;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        mix-blend-mode: difference;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        PlayerService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        PlayerService.OnChange -= StateHasChanged;
    }
}
